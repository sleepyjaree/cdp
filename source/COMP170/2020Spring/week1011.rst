
Review of Week 10 and Week 11
=======================================================


Inheritance
-------------------------


Data Structures
------------------

.. figure:: images/building.png
   :scale: 20 %
   :align: right

Data structures are how computers "perceive" our world. More precisely, data structures are mechanisms we develop, to translate our world into computer memory. 

Computer memory is a linear structure: one storage location after another. Our view of the world is a bit more sophisticated than that. 

To illustrate the difference between our perception of the world and the computer's linear perspective, we look at a 5-story building as an example. The floors are connected with escalators. Purple escalators go up. Orange escalators go down.

.. figure:: images/floorPattern.png
   :scale: 10 %
   :align: left

A floor in this building is modeled as an entity with an elevator going up to the next floor, and an elevator going to the floor below. There are two special floors in the building. A floor without a down escalator: the lowest floor of the building. And a floor without an up escalator: the top floor.

How do we model a floor, in software? In Java, obviously, we need a Class that we'll name ``Floor``. What will be the fields that describe the members of this Class. Maybe a number indicating the rank of the floor. And definitely information as to what floor is above and what floor is below.

.. code-block:: java

   public class Floor {
    private int floorNumber;
    private Floor above;
    private Floor below;
   }
   
The first thing we notice in Class ``Floor`` is that it contains two fields that are members of the class. Is this a chicken-and-egg problem? How can we possibly instantiate the first ever Floor object, when we have nothing to use for above and below? It all comes down to how we define the constructors and mutators of the class.

.. code-block:: java

   public class Floor {
   
    private int floorNumber;
    private Floor above;
    private Floor below;
	
    public Floor() {
     floorNumber = 0;
     above = null;
     below = null;
    } // default constructor
	
    public void setAbove(Floor above) { this.above = above; }
	
    public void setBelow(Floor below) { this.below = below; }
	
    public void setFloorNumber(int floorNumber) {this.floorNumber = floorNumber; }
	
   }

The default constructor ``Floor()`` allows us to create a Floor object without specifying which floors are above and below it. The corresponding objects ``above`` and ``below`` are initialized to a ``null`` value when the default constructor is called. This way we can instantiate a couple of floors before connecting them together:

.. code-block:: java

   Floor ground = new Floor();
   Floor first = new Floor();
   
   ground.setAbove = first; // floor above ground floor
   
   first.setBelow = ground; // floor below first floor
   first.setFloorNumber(1);
   
   Floor second = new Floor();
   
   second.setFloorNumber(2);
   second.setBelow = first; // floor below second floor
   first.setAbove = second; // floor above first floor

We can simplify the code above, by introducing a parameterized constructor in the Class that will reduce the need for the ``setFloorNumber`` mutator:   

.. code-block:: java
    
    private Floor(int floorNumber) {
     this.floorNumber = floorNumber;
     above = null;
     below = null;
    } // parameterized constructor for floorNumber
	
And the corresponding, simplified code is:

.. code-block:: java

   Floor ground = new Floor();
   Floor first = new Floor(1);
   
   ground.setAbove = first; // floor above ground floor
   
   first.setBelow = ground; // floor below first floor
   
   Floor second = new Floor(2);
   
   second.setBelow = first; // floor below second floor
   first.setAbove = second; // floor above first floor

.. figure:: images/floorObject.png
   :scale: 12 %
   :align: left


.. figure:: images/floorObjects.png
      :scale: 12 %
      :align: right
   

A singular floor object comprises a floor number, and two pointers: to the floor ``above`` and the floor ``below1``. A floor between two floors is associated with four points. Two of these pointers are its own ``above`` and ``below``. The other two are the ``below`` pointer from the floor above, and the ``above`` points from the floor below. It may look confusing but it is actually quite simple, as long as you keep in mind that a floor basically has two pointers radiating from it and towards other floors.

Ultimately, these floor objects must be stored in the computer's memory. The computer may scatter these floors all over its memory, and that's why these points are more important than ever: no matter where the computer stores these floor objects, we can follow the ``above`` (purple) and ``below`` (orange) pointers to find adjacent floors.

.. figure:: images/floorsInMemory.png
      :figwidth: 90%
      :align: center

The code below implements the Building class. (`The code is also available from Github <https://github.com/lgreco/cdp/blob/master/source/COMP170/codeExamples/Elevator/src/Building.java>`__). The comments in the code  complement the earlier analysis about the Building class. The highlighted lines are explained in more detail after the listing.

.. literalinclude:: ../codeExamples/Elevator/src/Building.java
   :linenos:
   :emphasize-lines: 64,75,95,100,144
   :language: java

The following figure shows what happens when we add floors to a building. When we instantiate the class Building (``Building demo = new Building();``), the compiler reserves memory for the building and allocates some space for a ground floor which does not exist at the moment; only an outline of where the ground floor will go exists for now, as shown in (a) below.

.. figure:: images/addFloor.png
   :figwidth: 90%
   :align: center

Next, when we attempt an ``addFloor()`` for the first time -- when there is no ground floor yet -- a new floor is created and becomes the ground floor (``ground=newFloor;``). This is shown in (b) above: the outline reserved for a ground floor is now occupied by an actual floor object, whose ``floorNumber`` is 1. From this point on, every time we call ``addFloor()``, a new floor is placed on top of the building (after method ``highestFloor`` finds the top floor -- **each time**.)

What happens when we add a floor to the top of the building is described in the figure below.

.. figure:: images/links.png
   :figwidth: 80%
   :align: center
   
Before the addition of a new floor, the floor of the top of the building has three points associated with it as shown in subfigure (a). A null pointer (indicated by a fainter color) to the floor above it tells us that there is no floor above it -- that's way the ``above`` pointer is null. And that's how we can tell the top floor: it's the floor whose ``above`` pointer is null. It has a ``below`` pointer indicating the floor beneath it. And it is also at the arriving end of the ``above`` pointer from the floor below it.

Subfigure (b) above, shows the introduction of a new floor. Method ``addFloor`` creates a new floor object. This object is yet to be 
related to our building. The new floor's ``above`` and ``below`` pointers are, at this time, null. No pointer from an existing floor in the building terminates on this new floor.

Relating the new floor to the existing building is shown in subfigure (c). New new floor's ``below`` pointer is assigned to the building's top floor (``newFloor.below = highestExistingFloor``). And the top floor's ``above`` pointer is connected the new floor (``highestExistingFloor.above = newFloor``). With these two assignments in lines 95 and 100 of the code listing, the new floor becomes the building's new *top* floor.
